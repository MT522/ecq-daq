[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "ecg-daq"
authors = [
    {name = "Mehrshad", email = "mehrshad@example.com"},
]
description = "High-performance ECG Data Acquisition System"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: System :: Hardware :: Hardware Drivers",
    "Topic :: Communications :: Serial",
]
keywords = [
    "ecg", "electrocardiogram", "data-acquisition", "medical-devices",
    "serial-communication", "uart", "real-time", "signal-processing",
    "healthcare", "biomedical", "cardiology"
]
dependencies = [
    "pydantic>=1.10.0",
    "numpy>=1.20.0",
    "pyserial>=3.5",
    "asyncio-mqtt>=0.10.0",
    "scipy>=1.8.0",
    "matplotlib>=3.5.0",
    "pandas>=1.4.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.991",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
visualization = [
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
]
testing = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/mehrshad/ecg-daq"
"Bug Tracker" = "https://github.com/mehrshad/ecg-daq/issues"
Documentation = "https://github.com/mehrshad/ecg-daq#readme"
"Source Code" = "https://github.com/mehrshad/ecg-daq"

[project.scripts]
ecg-monitor = "ecg_daq.examples.real_time_monitor:main"
ecg-plot = "ecg_daq.examples.plot_ecg_data:main"
ecg-mock-hardware = "ecg_daq.examples.mock_daq_hardware:main"

[tool.setuptools]
packages = ["ecg_daq", "ecg_daq.core", "ecg_daq.data_acquisition", "ecg_daq.protocols", "ecg_daq.examples"]

[tool.setuptools.package-data]
ecg_daq = ["py.typed"]

[tool.setuptools_scm]
write_to = "ecg_daq/_version.py"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ecg_daq"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "serial.*",
    "matplotlib.*",
    "pandas.*",
    "scipy.*",
    "numpy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["ecg_daq"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/_version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
